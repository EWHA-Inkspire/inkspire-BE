# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 언제 이 파일의 내용이 실행될 것인지 정의
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

# Github Actions에서 사용하는 VM에게 읽기 권한 주기
permissions:
  contents: read

# 실행될 내용 정의
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout
    - name: Checkout
      uses: actions/checkout@v3
    
    # JDK Set-up
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle caching
    - name: Gradle Caching
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # application-secret.yml파일 워크 플로우에 생성
    - name: Create application-secret.yml
      run: |
        cd ./src/main/resources
        touch ./application-secret.yml
        echo "${{ secrets.APPLICATION }}" > ./application-secret.yml
      shell: bash

    # Grant Permission to gradle wrapper
    - name: Run chmod to make gradlew executable
      run: chmod +x gradlew
      
    # Build Project
    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Cleanup Gradle Cache
      if: ${{ always() }}
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

    # DockerHub 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    # Docker Build & Push
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: /
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EC2_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          port: 22
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop prod-server
            sudo docker rm prod-server
            sudo docker image rm ${{ secrets.DOCKER_REPO }}
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_REPO }}