# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
         path: |
           ~/.gradle/caches
           ~/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
           ${{ runner.os }}-gradle-

    # application-secret.yml 추가
    - name: Create application-secret.yml
      run: |
        mkdir ./src/main/resources
        touch ./src/main/resources/application.yml
        echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application.yml
      shell: bash
           
    # gradle 빌드 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: |
        ./gradlew build

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: inkspire-BE
        path: build/libs/inkspire-BE-0.0.1-SNAPSHOT.jar

    - name: Cleanup Gradle Cache
      if: ${{ always() }}
      run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: inkspire-BE
        path: build/libs/

    # EC2에 배포
    # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
    # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
    # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
    ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/inkspire-BE-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER_NAME }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.EC2_USER_NAME }}/inkspire-BE.jar
        # rm -f private_key.pem
